name: Deploy AWS Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - 'cdk/**'
      - 'lambda/**'
      - 'scripts/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write   # Required for OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  
jobs:
  deploy-cdk:
    name: Deploy CDK Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: '20'
      
      - name: Install AWS CDK
        run: npm install -g aws-cdk@latest
      
      - name: Install CDK Python dependencies
        working-directory: ./cdk
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Lambda dependencies
        run: |
          for lambda_dir in lambda/*/; do
            if [ -f "${lambda_dir}requirements.txt" ]; then
              echo "Installing dependencies for ${lambda_dir}"
              pip install -r "${lambda_dir}requirements.txt" -t "${lambda_dir}"
            fi
          done
      
      - name: Install script dependencies
        run: pip install -r scripts/requirements.txt

      - name: Run build script
        run: python scripts/build.py
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-CDKDeploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify AWS identity
        run: |
          aws sts get-caller-identity
          echo "AWS Region: $AWS_REGION"
      
      - name: Bootstrap CDK
        working-directory: ./cdk
        run: cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}
      
      - name: Synthesize CDK stacks
        working-directory: ./cdk
        run: cdk synth --all
      
      - name: Show CDK diff
        working-directory: ./cdk
        run: cdk diff --all || true  # Don't fail on diff output
      
      - name: Deploy CDK stacks
        working-directory: ./cdk
        run: |
          cdk deploy --all \
            --require-approval never \
            --outputs-file ./cdk-outputs.json \
            --progress events \
            --concurrency 3
      
      - name: Configure AgentCore
        working-directory: ./scripts
        run: |
          pip install -r requirements.txt
          python setup-agentcore.py
        env:
          SESSIONS_TABLE_NAME: ${{ steps.get-outputs.outputs.sessions_table }}
      
      - name: Seed sample data
        working-directory: ./scripts
        run: python seed-rate-sheets.py
        env:
          RATE_SHEETS_TABLE_NAME: ${{ steps.get-outputs.outputs.rate_sheets_table }}
      
      - name: Upload sample templates
        working-directory: ./scripts
        run: python upload-sample-templates.py
        env:
          TEMPLATES_BUCKET_NAME: ${{ steps.get-outputs.outputs.templates_bucket }}
      
      - name: Upload CDK outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs
          path: cdk/cdk-outputs.json
          retention-days: 30
      
      - name: Extract CloudFormation outputs
        id: get-outputs
        working-directory: ./cdk
        run: |
          echo "api_url=$(jq -r '.ScopeSmithAPI.ApiGatewayURL' cdk-outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(jq -r '.ScopeSmithFrontend.CloudFrontURL' cdk-outputs.json)" >> $GITHUB_OUTPUT
          echo "sessions_table=$(jq -r '.ScopeSmithInfra.SessionsTableName' cdk-outputs.json)" >> $GITHUB_OUTPUT
          echo "rate_sheets_table=$(jq -r '.ScopeSmithInfra.RateSheetsTableName' cdk-outputs.json)" >> $GITHUB_OUTPUT
          echo "templates_bucket=$(jq -r '.ScopeSmithInfra.TemplatesBucketName' cdk-outputs.json)" >> $GITHUB_OUTPUT
      
      - name: Display deployment summary
        run: |
          echo "✅ Deployment Complete!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌐 API Gateway URL: ${{ steps.get-outputs.outputs.api_url }}"
          echo "🚀 CloudFront URL: ${{ steps.get-outputs.outputs.cloudfront_url }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    outputs:
      api_url: ${{ steps.get-outputs.outputs.api_url }}
      cloudfront_url: ${{ steps.get-outputs.outputs.cloudfront_url }}
name: Deploy Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1

jobs:
  deploy-frontend:
    name: Build and Deploy Vue.js Frontend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci || {
            echo "npm ci failed, clearing cache and reinstalling..."
            rm -rf node_modules package-lock.json
            npm cache clean --force
            npm install
          }
      
      - name: Download CDK outputs artifact
        uses: actions/download-artifact@v5
        with:
          name: cdk-outputs
          path: ./cdk
        continue-on-error: true
      
      - name: Configure environment variables
        working-directory: ./frontend
        run: |
          if [ -f ../cdk/cdk-outputs.json ]; then
            API_URL=$(jq -r '.ScopeSmithAPI.ApiGatewayURL' ../cdk/cdk-outputs.json)
            echo "VITE_API_BASE_URL=${API_URL}" > .env.production
          else
            echo "⚠️  CDK outputs not found, using placeholder"
            echo "VITE_API_BASE_URL=https://api.scopesmith.com" > .env.production
          fi
      
      - name: Lint code
        working-directory: ./frontend
        run: npm run lint --if-present || echo "No lint script found"
      
      - name: Build Vue.js app
        working-directory: ./frontend
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Verify build artifacts
        working-directory: ./frontend
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "❌ Build failed: dist/ directory is empty"
            exit 1
          fi
          echo "✅ Build successful: $(du -sh dist/)"
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-FrontendDeploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get S3 bucket name
        id: get-bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ScopeSmithFrontend \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "Deploying to bucket: ${BUCKET_NAME}"
      
      - name: Deploy to S3
        working-directory: ./frontend
        run: |
          aws s3 sync dist/ s3://${{ steps.get-bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "index.html" \
            --exclude "*.map"
          
          # Upload index.html separately with no-cache
          aws s3 cp dist/index.html s3://${{ steps.get-bucket.outputs.bucket_name }}/index.html \
            --cache-control "no-cache,no-store,must-revalidate" \
            --content-type "text/html"
      
      - name: Get CloudFront distribution ID
        id: get-cloudfront
        run: |
          DIST_ID=$(aws cloudformation describe-stacks \
            --stack-name ScopeSmithFrontend \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          echo "distribution_id=${DIST_ID}" >> $GITHUB_OUTPUT
          echo "CloudFront Distribution: ${DIST_ID}"
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-cloudfront.outputs.distribution_id }} \
            --paths "/*"
          echo "✅ CloudFront cache invalidation initiated"
      
      - name: Display frontend URL
        run: |
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name ScopeSmithFrontend \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
            --output text)
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Frontend deployed successfully!"
          echo "🌐 URL: ${CLOUDFRONT_URL}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"